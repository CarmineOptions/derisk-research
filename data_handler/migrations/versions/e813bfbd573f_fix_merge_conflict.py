"""fix merge conflict

Revision ID: e813bfbd573f
Revises: 593bb0a7d06b
Create Date: 2024-07-03 16:48:38.031605

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from data_handler.handlers.liquidable_debt.values import LendingProtocolNames
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e813bfbd573f"
down_revision: Union[str, None] = "593bb0a7d06b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Get the current database bind and create an inspector object
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    # Check if columns already exist before adding them
    existing_columns = [
        column["name"] for column in inspector.get_columns("liquidable_debt")
    ]

    if "protocol_name" not in existing_columns:
        op.add_column(
            "liquidable_debt",
            sa.Column(
                "protocol_name",
                sqlalchemy_utils.types.choice.ChoiceType(LendingProtocolNames),
                nullable=False,
            ),
        )
    if "collateral_token_price" not in existing_columns:
        op.add_column(
            "liquidable_debt",
            sa.Column("collateral_token_price", sa.DECIMAL(), nullable=False),
        )
    if "collateral_token" not in existing_columns:
        op.add_column(
            "liquidable_debt",
            sa.Column("collateral_token", sa.String(), nullable=False),
        )
    if "debt_token" not in existing_columns:
        op.add_column(
            "liquidable_debt", sa.Column("debt_token", sa.String(), nullable=False)
        )

    # Drop columns if they exist
    if "protocol" in existing_columns:
        op.drop_column("liquidable_debt", "protocol")
    if "collateral" in existing_columns:
        op.drop_column("liquidable_debt", "collateral")
    if "user" in existing_columns:
        op.drop_column("liquidable_debt", "user")
    if "health_factor" in existing_columns:
        op.drop_column("liquidable_debt", "health_factor")
    if "debt" in existing_columns:
        op.drop_column("liquidable_debt", "debt")
    if "debt_usd" in existing_columns:
        op.drop_column("liquidable_debt", "debt_usd")
    if "risk_adjusted_collateral" in existing_columns:
        op.drop_column("liquidable_debt", "risk_adjusted_collateral")

    # Drop the index if it exists
    existing_indexes = [
        index["name"] for index in inspector.get_indexes("liquidable_debt")
    ]
    if "ix_liquidable_debt_user" in existing_indexes:
        op.drop_index("ix_liquidable_debt_user", table_name="liquidable_debt")

    # Add a new column to another table
    existing_orderbook_columns = [
        column["name"] for column in inspector.get_columns("orderbook")
    ]
    if "current_price" not in existing_orderbook_columns:
        op.add_column(
            "orderbook", sa.Column("current_price", sa.DECIMAL(), nullable=True)
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("orderbook", "current_price")
    op.add_column(
        "liquidable_debt",
        sa.Column(
            "risk_adjusted_collateral",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column("debt_usd", sa.NUMERIC(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column(
            "debt",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column("health_factor", sa.NUMERIC(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column("user", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column(
            "collateral",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "liquidable_debt",
        sa.Column(
            "protocol", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
    )
    op.create_index(
        "ix_liquidable_debt_user", "liquidable_debt", ["user"], unique=False
    )
    op.drop_column("liquidable_debt", "debt_token")
    op.drop_column("liquidable_debt", "collateral_token")
    op.drop_column("liquidable_debt", "collateral_token_price")
    op.drop_column("liquidable_debt", "protocol_name")
    # ### end Alembic commands ###
