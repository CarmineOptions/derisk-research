"""Alter unique notification email

Revision ID: 26bebf9e427d
Revises: f2c41f4ff53f
Create Date: 2024-05-22 19:36:14.751029

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "26bebf9e427d"
down_revision: Union[str, None] = "f2c41f4ff53f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_notification_email", table_name="notification")
    op.create_index(
        op.f("ix_notification_email"), "notification", ["email"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    op.drop_index(op.f("ix_notification_email"), table_name="notification")
    # Check for duplicate emails
    connection = op.get_bind()
    duplicates = connection.execute(
        sa.text(
            """
               SELECT email
               FROM notification
               GROUP BY email
               HAVING COUNT(email) > 1
           """
        )
    ).fetchall()

    if duplicates:
        # Notify user about duplicates
        print("Found duplicate email addresses in 'notification' table:")
        for row in duplicates:
            print(row.email)
        # Ask for user permission to delete duplicates
        user_input = (
            input("Do you want to delete duplicate records? [yes/no]: ").strip().lower()
        )
        if user_input != "yes":
            print("Aborting downgrade operation due to duplicate email addresses.")
            return
        # Delete duplicate records, keeping only the first occurrence
        connection.execute(
            sa.text(
                """
            DELETE FROM notification
            WHERE id NOT IN (
                SELECT id
                FROM (
                    SELECT id,
                           ROW_NUMBER() OVER (PARTITION BY email ORDER BY created_at, id) AS r
                    FROM notification
                ) AS subq
                WHERE r = 1
            )"""
            )
        )

    op.create_index("ix_notification_email", "notification", ["email"], unique=True)
